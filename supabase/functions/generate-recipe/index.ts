import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const authHeader = req.headers.get('authorization');
    if (!authHeader) {
      throw new Error('Pas d\'en-t√™te d\'autorisation');
    }

    if (!openAIApiKey) {
      throw new Error('Cl√© API OpenAI non configur√©e');
    }

    const { childProfiles, filters, offset = 0 } = await req.json();
    console.log('Received request with child profiles:', childProfiles);
    console.log('Filters:', filters);
    console.log('Offset:', offset);

    const allAllergies = [...new Set(childProfiles.flatMap(child => child.allergies || []))];
    const commonPreferences = childProfiles.reduce((common, child) => {
      if (common.length === 0) return child.preferences || [];
      return common.filter(pref => (child.preferences || []).includes(pref));
    }, []);

    const ageRange = {
      min: Math.min(...childProfiles.map(child => child.age)),
      max: Math.max(...childProfiles.map(child => child.age))
    };

    const mealTypePrompt = filters?.mealType ? `pour le ${filters.mealType}` : 'pour n\'importe quel repas';
    const difficultyPrompt = filters?.difficulty ? `de difficult√© ${filters.difficulty}` : '';
    const timePrompt = filters?.maxPrepTime ? `qui se pr√©pare en moins de ${filters.maxPrepTime} minutes` : '';

    const prompt = `En tant que chef cuisinier et p√©diatre nutritionniste fran√ßais sp√©cialis√© dans l'alimentation multi-√¢ges, cr√©e 3 recettes exceptionnelles, gourmandes et √©quilibr√©es ${mealTypePrompt} ${difficultyPrompt} ${timePrompt} pour ${childProfiles.length} enfant(s) √¢g√©s de ${ageRange.min} √† ${ageRange.max} ans.
    
    IMPORTANT: G√©n√®re des recettes DIFF√âRENTES √† chaque fois, ne r√©p√®te pas les m√™mes recettes.
    Utilise ton imagination pour cr√©er des recettes uniques et vari√©es.

    ${allAllergies.length > 0 ? `‚ö†Ô∏è S√âCURIT√â ALIMENTAIRE CRITIQUE - ALLERGIES :
    - Exclus ABSOLUMENT et STRICTEMENT ces allerg√®nes pour TOUS les enfants : ${allAllergies.join(', ')}
    - V√©rifie TOUS les ingr√©dients pour √©viter les contaminations crois√©es
    - Propose des alternatives s√ªres pour les ingr√©dients allerg√®nes` : ''}

    ${commonPreferences.length > 0 ? `‚ú® PR√âF√âRENCES PARTAG√âES :
    - Privil√©gie ces ingr√©dients appr√©ci√©s par TOUS les enfants : ${commonPreferences.join(', ')}
    - Adapte les recettes pour maximiser l'utilisation de ces ingr√©dients favoris communs` : ''}
    
    CRIT√àRES ESSENTIELS pour chaque recette :
    1. üßí ADAPTATION MULTI-√ÇGES (${ageRange.min}-${ageRange.max} ans)
       - Portions et textures adaptables selon l'√¢ge
       - Instructions sp√©cifiques pour adapter aux diff√©rents √¢ges si n√©cessaire
    
    2. üçé S√âCURIT√â ET NUTRITION
       - Ingr√©dients frais et sains
       - Portions adapt√©es aux besoins nutritionnels de chaque √¢ge
       - √âquilibre nutritionnel optimal pour la tranche d'√¢ge
    
    3. üë©‚Äçüç≥ PRATICIT√â ET PARTICIPATION
       - Instructions simples et claires
       - √âtapes adapt√©es pour faire participer les enfants selon leur √¢ge
       - Temps de pr√©paration r√©aliste pour une famille
    
    4. üé® ASPECT LUDIQUE ET ATTRACTIF
       - Pr√©sentation attrayante pour tous les √¢ges
       - Couleurs et formes amusantes
       - Noms cr√©atifs et amusants
    
    5. üß† D√âVELOPPEMENT ET SANT√â
       - Ingr√©dients favorisant le d√©veloppement cognitif
       - Superaliments adapt√©s √† chaque √¢ge
       - Combinaisons d'aliments optimisant l'absorption des nutriments
    
    6. üë• PERSONNALISATION MULTI-ENFANTS
       - Possibilit√© d'adapter les portions/textures selon l'√¢ge
       - Options de personnalisation respectant les pr√©f√©rences communes
       - Suggestions de variations pour satisfaire les diff√©rents go√ªts

    TR√àS IMPORTANT : Pour chaque recette, fournis une liste de 3 √† 5 bienfaits sant√© sp√©cifiques parmi ces cat√©gories :
    - cognitive: bienfaits pour le cerveau et la concentration
    - energy: apport en √©nergie et vitalit√©
    - satiety: sati√©t√© et contr√¥le de l'app√©tit
    - digestive: sant√© digestive
    - immunity: renforcement du syst√®me immunitaire
    - growth: croissance et d√©veloppement
    - mental: bien-√™tre mental et √©motionnel
    - organs: sant√© des organes
    - beauty: sant√© de la peau et des cheveux
    - physical: force et endurance physique
    - prevention: pr√©vention des maladies
    - global: sant√© globale

    Pour chaque bienfait, fournis :
    - category: la cat√©gorie (parmi la liste ci-dessus)
    - description: une description courte et ludique du bienfait
    - icon: une ic√¥ne parmi : brain, zap, cookie, shield, leaf, lightbulb, battery, apple, heart, sun, dumbbell, sparkles`;

    console.log('Sending request to OpenAI with prompt:', prompt);
    
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: 'Tu es un chef cuisinier fran√ßais cr√©atif, passionn√© et reconnu pour tes comp√©tences en p√©diatrie nutritionnelle et en alimentation multi-√¢ges. Tu es particuli√®rement attentif aux allergies alimentaires et aux besoins nutritionnels sp√©cifiques des enfants. R√©ponds UNIQUEMENT avec le JSON demand√©, sans aucun texte suppl√©mentaire.'
          },
          { role: 'user', content: prompt }
        ],
        temperature: 0.9,
      }),
    });

    if (!response.ok) {
      const error = await response.json();
      console.error('OpenAI API error:', error);
      throw new Error(`Erreur API OpenAI : ${error.error?.message || response.statusText}`);
    }

    const data = await response.json();
    console.log('OpenAI response received:', data);
    
    if (!data.choices?.[0]?.message?.content) {
      throw new Error('Structure de r√©ponse OpenAI invalide');
    }

    let content = data.choices[0].message.content.trim();
    if (content.startsWith('```')) {
      content = content.replace(/```json\n?/, '').replace(/```\n?$/, '');
    }

    console.log('Parsing JSON response:', content);
    let recipes;
    try {
      recipes = JSON.parse(content);
    } catch (error) {
      console.error('JSON parse error:', error);
      throw new Error(`√âchec du parsing JSON : ${error.message}`);
    }

    if (!Array.isArray(recipes)) {
      console.error('Invalid recipes structure:', recipes);
      throw new Error('Structure des recettes invalide');
    }

    // Add generated flag and timestamps to each recipe
    const processedRecipes = recipes.map(recipe => ({
      ...recipe,
      is_generated: true,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
      profile_id: childProfiles[0].profile_id,
    }));

    return new Response(JSON.stringify(processedRecipes), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  } catch (error) {
    console.error('Error in generate-recipe function:', error);
    return new Response(
      JSON.stringify({ 
        error: error.message,
        details: "Une erreur est survenue lors de la g√©n√©ration des recettes. Veuillez r√©essayer."
      }),
      { 
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      },
    );
  }
});