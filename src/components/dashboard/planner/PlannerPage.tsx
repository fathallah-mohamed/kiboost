import { useState } from 'react';
import { Card } from '@/components/ui/card';
import { BackToDashboard } from '../BackToDashboard';
import { MultiChildSelector } from '../recipe/MultiChildSelector';
import { ChildProfile } from '../types';
import { useMealPlanner } from '../meal-planner/hooks/useMealPlanner';
import { PlannerCalendar } from './PlannerCalendar';
import { PlannerRecipes } from './PlannerRecipes';
import { useNavigate } from 'react-router-dom';

interface PlannerPageProps {
  userId: string;
  onSectionChange?: (section: string) => void;
}

export const PlannerPage = ({ userId, onSectionChange }: PlannerPageProps) => {
  const [selectedChildren, setSelectedChildren] = useState<ChildProfile[]>([]);
  const navigate = useNavigate();
  
  const {
    selectedDate,
    setSelectedDate,
    recipes,
    plannedRecipes,
    loading,
    planningRecipe,
    planRecipe,
    removeRecipe,
    viewMode,
    setViewMode,
    isAutoGenerated
  } = useMealPlanner(userId, selectedChildren);

  const handleRemoveRecipe = async (date: string, childId: string) => {
    await removeRecipe(date, childId);
  };

  return (
    <div className="container mx-auto px-4 py-8 space-y-6">
      <BackToDashboard onBack={() => navigate('/dashboard')} />
      
      <div className="space-y-6">
        <div>
          <h2 className="text-2xl font-bold">Planificateur de Repas</h2>
          <p className="text-muted-foreground mt-2">
            Planifiez les repas de la semaine pour vos enfants
          </p>
        </div>

        <Card className="p-4">
          <MultiChildSelector 
            onSelectChildren={setSelectedChildren}
            selectedChildren={selectedChildren}
          />
        </Card>
        
        <div className="grid grid-cols-1 gap-6">
          <PlannerCalendar
            selectedDate={selectedDate}
            setSelectedDate={setSelectedDate}
            plannedRecipes={plannedRecipes}
            viewMode={viewMode}
            setViewMode={setViewMode}
            selectedChildren={selectedChildren}
            onRemoveRecipe={handleRemoveRecipe}
            isAutoGenerated={isAutoGenerated}
          />

          <PlannerRecipes
            recipes={recipes}
            loading={loading}
            planningRecipe={planningRecipe}
            onPlanRecipe={(recipe) => planRecipe(recipe, selectedChildren)}
          />
        </div>
      </div>
    </div>
  );
};